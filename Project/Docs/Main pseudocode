				CURRENT_STATE := STATE_START

LOOP:			CALL CURRENT_STATE						; Call the 'CURRENT STATE' subroutine
				GOTO LOOP								; forever

STATE_START: 	CURRENT_STATE := THINK					; The START state subroutine
				Return

STATE_THINK		IF PATH_PORT == 1 || PATH_STAR == 1		; Check if a path was found
					CURRENT_STATE:= STATE_INTERSECTION
					return

				ELSE
					CURRENT_STATE:= STATE_FWD
					Return

STATE_FWD:		IF	REAR_BUMP then						; The THINK state subroutine
					CURRENT_STATE := STATE_STOP
					Return

				IF	FRONT_BUMP then						
					CURRENT_STATE := STATE_REVERSE
					Return

				IF TH_PORT < SENSOR_PORT  			; Sensor B is on black
					PATH_PORT := 1
					CURRENT_STATE:= STATE_THINK
					Return

				IF	TH_STAR < SENSOR_STAR 			; Sensor D is on black
					PATH_STAR := 1
					CURRENT_STATE:= STATE_THINK
					Return
			
				IF	TH_BOW < SENSOR_BOW					; Sensor A is on black
					CURRENT_STATE:= STATE_FWD
					Return

				IF	TH_LINE_LEFT < SENSOR_LINE 			; Sensor E-F is on left of line
					CURRENT_STATE:= STATE_RIGHT
					Return

				IF	TH_LINE_RIGHT > SENSOR_LINE 		; Sensor E-F is on right of line
					CURRENT_STATE:= STATE_LEFT

				Else
					GO FORWARD
					Return

STATE_REV		IF 	T > TIME_REV then					; The REVERSE state subroutine
					CURRENT_STATE := STATE_180
					Return
				ELSE 
					Return

STATE_LEFT		IF	T > DLY_LEFT then					; The LEFT state subroutine
					CURRENT_STATE := THINK				
					Return
				ELSE
					Return

STATE_RIGHT		IF 	T > DLY_RIGHT then					; The RIGHT state subroutine	
					CURRENT_STATE := STATE_THINK
					Return
				ELSE
					Return

STATE_INTERSECTION	IF 	COMPLETED_180 == 0					; Intersection state subroutine
						IF PATH_PORT == 1
							CURRENT_STATE := STATE_LEFT
							INTERSECT_LAST := 0

					
					Return
				ELSE
					Return


STATE_180		IF	T > TIME_180 then					; The 180 state subroutine
					COMPLETED_180 := 1 					; Completed 180 turn
					CURRENT_STATE := STATE_THINK
					Return
				ELSE
					Return

STATE_STOP		CURRENT_STATE := STATE_STOP 			; The STOP state subroutine
				Return